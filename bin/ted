#!/bin/bash
# ted	This is the init script for starting up the Transformation Engine
#		server
#
# chkconfig: - 64 36
# description: Starts and stops the request and rendering backend daemon 
# processname: te_request_server te_rendering_server
# pidfile: /var/run/te_request_server.pid /var/run/te_rendering_server.pid /var/run/te_ooo.pid

cd /

# Source function library.
. /lib/lsb/init-functions

# Find the name of the script
NAME=`basename $0`
if [ ${NAME:0:1} = "S" -o ${NAME:0:1} = "K" ]
then
    NAME=${NAME:3}
fi

# For SELinux we need to use 'runuser' not 'su'
if [ -x /sbin/runuser ]
then
    SU=runuser
else
    SU=su
fi

# Try to locate TE_HOME from script pathname
if [ -z "$TE_HOME" ]; then
    MY_PATH=$0
    if [ -L "$MY_PATH" ]; then
	MY_PATH=`readlink -f "$MY_PATH"`
    fi
    DIRNAME=`dirname "$MY_PATH"`
    DIRNAME="$DIRNAME/../"
    REAL_DIRNAME=`cd "$DIRNAME" 1 > /dev/null 2>&1 && pwd`
    export TE_HOME=$REAL_DIRNAME
fi

# Set defaults for configuration variables
PID_DIR=/var/run
TE_REQUEST_PID=$PID_DIR/te_request_server.pid
TE_RENDERING_PID=$PID_DIR/te_rendering_server.pid
TE_OOO_PID=$PID_DIR/te_ooo.pid

TE_PG_SERVICE=te
PORT=51968
LISTEN_ADDRESS=0.0.0.0
REQUEST_MAX_CLIENT=15
REQUEST_DIRECTORY=/var/tmp
RENDERING_MAX_CLIENT=10
RENDERING_DIRECTORY=/var/tmp
TE_SERVER_USER=root
TE_OOO_BASE_DIR=/opt/openoffice.org3
TE_OOO_SERVER_ENABLED=yes
TE_OOO_SERVER_SOFFICE=${TE_OOO_BASE_DIR}/program/soffice
TE_OOO_SERVER_HOST=127.0.0.1
TE_OOO_SERVER_PORT=8123

check_environment() {
    if [ ! -d "$TE_HOME" ]; then
	echo "Error: TE_HOME directory '$TE_HOME' not found."
	exit 1
    fi
    if [ ! -d "$TE_HOME/etc" ]; then
	echo "Error: directory '$TE_HOME/etc' not found."
	exit 1
    fi
    if [ ! -f "$TE_HOME/etc/te.conf" ]; then
	echo "Error: config file '$TE_HOME/etc/te.conf' not found."
	echo "Hint: you might need to create 'te.conf' by copying '$TE_HOME/etc/te.conf.sample'."
	exit 1
    fi
    if [ ! -d "$PID_DIR" -a ! -w "$PID_DIR" ]; then
	echo "Error: pid dir '$PID_DIR' not found or not writable."
	exit 1
    fi
    if [ "$TE_OOO_SERVER_ENABLED" = "yes" ]; then
	if [ ! -x "$TE_OOO_SERVER_PYTHON" ]; then
	    echo "Error: TE_OOO_SERVER_PYTHON '$TE_OOO_SERVER_PYTHON' (in '$TE_HOME/etc/te.conf') is not executable!"
	    exit 1
	fi
	if [ ! -x "$TE_OOO_SERVER_SOFFICE" ]; then
	    echo "Error: TE_OOO_SERVER_SOFFICE '$TE_OOO_SERVER_SOFFICE' (in '$TE_HOME/etc/te.conf') is not executable!"
	    exit 1
	fi
	if [ ! -x "$TE_OOO_SERVER_UNOPKG" ]; then
	    echo "Error: TE_OOO_SERVER_UNOPKG '$TE_OOO_SERVER_UNOPKG' (in '$TE_HOME/etc/te.conf') is not executable!"
	    exit 1
	fi
	if [ -z "(which java)" ]; then
	    echo "Error: java interpreter not found in PATH!"
	    exit 1
	fi
    fi
}

# Get config.
. "$TE_HOME/etc/te.conf"

check_environment

# Postgresql database service
DB="service='$TE_PG_SERVICE'"

script_result=0

start() {
    ret1=0
    ret2=0
    ret3=0
    TE_START=$"Starting ${NAME} service: "
	
    # Start OOO
    if [ "$TE_OOO_SERVER_ENABLED" = "yes" ] && [ ! -f "$TE_OOO_PID" ]; then
	echo -n "Starting OOO server... "
	$SU -s /bin/bash -c "\"$TE_HOME/lib/engines/te-xvfb-run\" -a \"$TE_OOO_SERVER_SOFFICE\" -headless -invisible -nofirststartwizard '-accept=socket,host=$TE_OOO_SERVER_HOST,port=$TE_OOO_SERVER_PORT;urp;'" "$TE_SERVER_USER" 1> /dev/null 2>&1 &
	sleep 1
	kill -0 $!
	ret1=$?
	echo $! > "$TE_OOO_PID"
	echo $!
    fi

    # Start REQUEST
    if [ ! -f "$TE_REQUEST_PID" ]; then
	echo -n "Starting te_request_server... "
	$SU -s /bin/bash -c "\"$TE_HOME/bin/te_request_server\" --port=$PORT --laddr=$LISTEN_ADDRESS --db=\"$DB\" --maxclient=$REQUEST_MAX_CLIENT --directory=$REQUEST_DIRECTORY" "$TE_SERVER_USER" 1> /dev/null 2>&1 &
	sleep 1
	kill -0 $!
	ret2=$?
        echo $! > "$TE_REQUEST_PID"
	echo $!
    fi

    # Start RENDERING
    if [ ! -f "$TE_RENDERING_PID" ]; then
	echo -n "Starting te_rendering_server... "
	$SU -s /bin/bash -c "\"$TE_HOME/bin/te_rendering_server\" --db=\"$DB\" --maxclient=$RENDERING_MAX_CLIENT --directory=$RENDERING_DIRECTORY --loginfile=\"$TE_HOME/etc/te.conf\"" "$TE_SERVER_USER" 1> /dev/null 2>&1 &
	sleep 1
	kill -0 $!
	ret3=$?
	echo $! > "$TE_RENDERING_PID"
	echo $!
    fi

    # if [ "$TE_OOO_SERVER_ENABLED" = "yes" && -f "$TE_OOO_PID" ] && [ -f "$TE_REQUEST_PID" ] && [ -f "$TE_RENDERING_PID" ]
    if [ $ret1 -eq 0 -a $ret2 -eq 0 -a $ret3 -eq 0 ]
    then
	log_success_msg "$TE_START" "OK"
	echo
    else
	log_failure_msg "$TE_START" "FAILED"
	echo
	script_result=1
    fi    
}

stop(){
    ret1=0
    ret2=0
    ret3=0
    TE_STOP=$"Stopping ${NAME} service: "

    # Stop REQUEST
    if [ -f $TE_REQUEST_PID ]
    then
	echo -n "Stopping te_request_server... "
    	tepid=`cat $TE_REQUEST_PID`
    	kill -TERM $tepid 1> /dev/null 2>&1
    	ret1=$?
	echo $tepid
    else
    	echo "request server not running"
    fi
 
    # Stop RENDERING
    if [ -f $TE_RENDERING_PID ]
    then
	echo -n "Stopping te_rendrering_server... "
	tepid=`cat $TE_RENDERING_PID`
	kill -TERM $tepid 1> /dev/null 2>&1
	ret2=$?
	echo $tepid
    else
    	echo "rendering server not running"
    fi
 
    # Stop OOO
    if [ "$TE_OOO_SERVER_ENABLED" = "yes" ]; then
	if [ -f $TE_OOO_PID ]
	then
	    echo -n "Stopping OOO server... "
	    tepid=`cat "$TE_OOO_PID"`
	    kill -TERM $tepid 1> /dev/null 2>&1
	    ret3=$?
	    echo $tepid
	else
	    echo "ooo server not running"
	fi
    fi

    if [ $ret1 -eq 0 ] && [ $ret2 -eq 0 ] && [ $ret3 -eq 0 ]
    then
	log_success_msg "$TE_STOP" "OK"
    else
	log_failure_msg "$TE_STOP" "FAILED"
	script_result=1
    fi
    echo
    /bin/rm -f $TE_REQUEST_PID
    /bin/rm -f $TE_RENDERING_PID
    if [ "$TE_OOO_SERVER_ENABLED" = "yes" ]; then
	/bin/rm -f $TE_OOO_PID
    fi
}

restart(){
    stop
    start
}

status2(){
    ret1=1
    ret2=1
    ret3=1

    if [ -f $TE_REQUEST_PID ]
	then
	tepid=`cat $TE_REQUEST_PID`
	kill -0 $tepid 1> /dev/null 2>&1
	ret1=$?
	c1=$tepid
    fi
    if [ -f $TE_RENDERING_PID ]
	then
	tepid=`cat $TE_RENDERING_PID`
	kill -0 $tepid 1> /dev/null 2>&1
	ret2=$?
	c2=$tepid
    fi
    if [ "$TE_OOO_SERVER_ENABLED" = "yes" ] && [ -f $TE_OOO_PID ]
	then
	tepid=`cat "$TE_OOO_PID"`
	kill -0 $tepid 1> /dev/null 2>&1
	ret3=$?
	c3=$tepid
    fi

    if [ $ret1 -eq 0 ] 
	then
		echo "Request server running ($c1)"
	else
		echo "Request server is down"
		script_result=1
    fi
    if [ $ret2 -eq 0 ] 
	then
		echo "Rendering server running ($c2)"
	else
		echo "Rendering server is down"
		script_result=1
    fi
    if [ "$TE_OOO_SERVER_ENABLED" = "yes" ]; then
	if [ $ret3 -eq 0 ]
	then
	    echo "OOO server running ($c3)"
	else
	    echo "OOO server is down"
	    script_result=1
	fi
    fi
    
    
}

init(){
	TE_INIT=$"Initializing ${NAME} service: "
	if  [ ! -d "$TE_HOME/" ]
	    then
	    echo "Transformation Engine not installed in $TE_HOME"
	    log_failure_msg "$TE_INIT" "FAILED"
	    script_result=1
	    exit 1;
	fi
	"$TE_HOME/bin/te_server_init"  --db="$DB" 
	ret=$?
	if [ $ret -eq 0 ] 
	then
		log_success_msg "$TE_INIT""OK"
		echo
	else
	    if [ $ret -eq 1 ] 
		then
		echo
		echo -n  "Database already created"
		log_warning_msg "$TE_INIT" "WARNING"
		echo
	    else
		log_failure_msg "$TE_INIT" "FAILED"
		echo
		script_result=1
		return 1
	    fi
	fi
}

check() {
    $SU -s /bin/bash -c "\"$TE_HOME/lib/engines/engines-check.sh\"" "$TE_SERVER_USER"
    script_result=$?
}

cleantmpfiles() {
    local DEADLINE="7"
    if [[ -n $1 && $1 =~ ^[0-9][0-9]*$ ]]; then
	DEADLINE=$1
    fi
    if [ -d "$REQUEST_DIRECTORY" ]; then
	find "$REQUEST_DIRECTORY" -maxdepth 1 -type f -name "te[rs]-*" -mtime "+$DEADLINE" -print0 | xargs -0 --no-run-if-empty rm
	find "$REQUEST_DIRECTORY" -maxdepth 1 -type d -name "te[rs]-*" -mtime "+$DEADLINE" -print0 | xargs -0 --no-run-if-empty rm -r
    fi
    if [ -d "$RENDERING_DIRECTORY" ]; then
	find "$RENDERING_DIRECTORY" -maxdepth 1 -type f -name "te[rs]-*" -mtime "+$DEADLINE" -print0 | xargs -0 --no-run-if-empty rm
	find "$RENDERING_DIRECTORY" -maxdepth 1 -type d -name "te[rs]-*" -mtime "+$DEADLINE" -print0 | xargs -0 --no-run-if-empty rm -r
    fi
}

# See how we were called.
case "$1" in
    start)
	start
	;;
    stop)
	stop
	;;
    init)
	init
	;;
    status)
	status2
	;;
    restart)
	restart
	;;
    check)
	check
	;;
    cleantmpfiles)
        cleantmpfiles "$2"
	;;
    *)
	echo $"Usage: $0 {init|start|stop|status|restart|check|cleantmpfiles}"
	exit 1
esac

exit $script_result
